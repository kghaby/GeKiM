import numpy as np
#TODO: scheme fitting

def chi_squared(observed_data, fitted_data, fitted_params, variances=None, reduced=False):
    """
    Calculate the chi-squared and optionally the reduced chi-squared statistics.

    Args:
        observed_data (np.array): The observed data points.
        fitted_data (np.array): The fitted data points obtained from curve 
        fitted_params (list or np.array): The optimal parameters obtained from curve 
        variances (np.array, optional): Variances of the observed data points. If None, assume constant variance.
        reduced (bool, optional): If True, calculate and return the reduced chi-squared.

    Returns:
        float: The chi-squared or reduced chi-squared statistic.
    """

    if len(observed_data) != len(fitted_data):
        raise ValueError("Length of observed_data and fitted_data must be the same.")

    if len(fitted_params) == 0:
        raise ValueError("fitted_params cannot be empty.")

    residuals = observed_data - fitted_data
    chi_squared = np.sum((residuals**2) / variances) if variances is not None else np.sum(residuals**2)

    if reduced:
        degrees_of_freedom = len(observed_data) - len(fitted_params)
        if degrees_of_freedom <= 0:
            raise ValueError("Degrees of freedom must be positive.")
        return chi_squared / degrees_of_freedom

    return chi_squared

def _extract_fit_info(params):
    """Extracts initial guesses, bounds, and segregates fixed and fitted parameters."""
    p0, bounds, param_order = [], ([], []), []
    fixed_params = {}
    for param, config in params.items():
        if config["fix"] is not None:
            fixed_params[param] = config["fix"]
        else:
            p0.append(config["guess"])
            bounds[0].append(config["bounds"][0])
            bounds[1].append(config["bounds"][1])
            param_order.append(param)
    return p0, bounds, param_order, fixed_params

class _FitOutput:
    """
    Comprises the output of a fitting operation.

    Attributes:
        fitted_params (dict): Parameters obtained from the fit, keyed by parameter name and zipped in the order indexed in pcov.
        pcov (array): Covariance matrix of the fitted parameters.
        x (array): Independent variable used for fitting 
        y (array): Data generated by the fitted params.
        reduced_chi_sq (float): Reduced chi-squared value indicating goodness of fit.
    """
    def __init__(self, fitted_params, pcov, fitted_xdata, fitted_ydata, reduced_chi_sq):
        self.fitted_params = fitted_params
        self.pcov = pcov
        self.x = fitted_xdata
        self.y = fitted_ydata
        self.reduced_chi_sq = reduced_chi_sq

def _prepare_output(popt, pcov, param_order, fitted_xdata, fitted_ydata, observed_data):
    """
    Prepare the fitting output as an instance of the FitOutput class.
    """
    fitted_params = dict(zip(param_order, popt))
    reduced_chi_sq = chi_squared(observed_data, fitted_ydata, popt, np.var(observed_data), reduced=True)
    return _FitOutput(fitted_params, pcov, fitted_xdata, fitted_ydata, reduced_chi_sq)

